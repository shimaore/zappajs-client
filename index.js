// Generated by CoffeeScript 1.12.2
(function() {
  var debug, domready, invariate, observable, pkg, request, riot, socketio, zappa,
    hasProp = {}.hasOwnProperty;

  pkg = {
    name: 'zappajs-client'
  };

  debug = (require('debug'))(pkg.name);

  request = (require('superagent-as-promised'))(require('superagent'));

  socketio = require('socket.io-client');

  domready = require('domready');

  observable = (riot = require('riot')).observable;

  invariate = require('invariate');

  riot.route = require('riot-route');

  zappa = function(options, f) {
    var build_ctx, context, ev, io, ref, ref1, share;
    if (typeof options === 'function') {
      ref = [{}, options], options = ref[0], f = ref[1];
    }
    if (options == null) {
      options = {};
    }
    context = {};
    ev = context.ev = observable();
    if (options.io !== false) {
      io = context.io = socketio((ref1 = options.io) != null ? ref1 : {});
    }
    context.request = request;
    context.riot = riot;
    context.include = function(m) {
      var ref2;
      return (ref2 = m.include) != null ? ref2.call(context, context) : void 0;
    };
    build_ctx = function(o) {
      var ctx, k, v;
      ctx = {
        ev: context.ev,
        io: context.io,
        request: context.request,
        riot: context.riot,
        emit: context.emit,
        on: context.on
      };
      for (k in o) {
        if (!hasProp.call(o, k)) continue;
        v = o[k];
        ctx[k] = v;
      }
      return ctx;
    };
    context.ready = function(f) {
      return context.ev.on('ready', function() {
        var ctx;
        ctx = build_ctx({
          settings: context.settings,
          get: context.get,
          route: context.route,
          start: context.start
        });
        return f.apply(ctx);
      });
    };
    context.start = function() {
      riot.route.start();
      return riot.route.exec();
    };
    context.get = context.route = invariate(function(k, v) {
      return riot.route(k, function() {
        var ctx;
        ctx = build_ctx({
          params: arguments,
          query: riot.route.query()
        });
        return v.apply(ctx, arguments);
      });
    });
    context.on = invariate(function(event, action) {
      return io.on(event, function(data, ack) {
        var ctx;
        ctx = build_ctx({
          event: event,
          data: data,
          ack: ack
        });
        return action.apply(ctx, arguments);
      });
    });
    context.emit = invariate.acked(function(event, data, ack) {
      return io.emit.call(io, event, data, function(ack_data) {
        var ctx;
        ctx = build_ctx({
          event: event,
          data: ack_data
        });
        return ack.apply(ctx, arguments);
      });
    });
    if (options.io === false) {
      context.on = function() {
        return debug('Socket.IO is disabled');
      };
      context.emit = function() {
        return debug('Socket.IO is disabled');
      };
    }
    if (f != null) {
      f.call(context, context);
    }
    if (options.io === false) {
      domready(function() {
        debug('DOM is ready');
        return ev.trigger('ready');
      });
      return context;
    }
    share = function(next) {
      var channel_name, ref2, ref3, uri, zappa_prefix;
      zappa_prefix = (ref2 = context.settings.zappa_prefix) != null ? ref2 : '/zappa';
      channel_name = (ref3 = context.settings.zappa_channel) != null ? ref3 : '__local';
      uri = zappa_prefix + "/socket/" + channel_name + "/" + io.id;
      debug("Requesting " + uri);
      return request.get(uri).accept('json')["catch"](function(error) {
        return {
          body: {
            key: null
          }
        };
      }).then(function(arg) {
        var key;
        key = arg.body.key;
        if (key != null) {
          debug("Sending __zappa_key to server", {
            key: key
          });
          return io.emit('__zappa_key', {
            key: key
          }, next);
        } else {
          return next({
            key: null
          });
        }
      });
    };
    io.on('connect', function() {
      debug("Connect");
      io.emit('__zappa_settings', null, function(settings) {
        debug('Received settings', settings);
        context.settings = settings;
        return share(function(arg) {
          var key;
          key = arg.key;
          debug('Received key', key);
          context.key = key;
          return domready(function() {
            debug('DOM is ready');
            return ev.trigger('ready');
          });
        });
      });
      return debug("Waiting for Zappa settings");
    });
    return context;
  };

  module.exports = zappa;

  module.exports.request = request;

  module.exports.io = socketio;

  module.exports.riot = riot;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC5jb2ZmZWUubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFJO0FBQUEsTUFBQSwyRUFBQTtJQUFBOztFQUFBLEdBQUEsR0FBTTtJQUFBLElBQUEsRUFBTSxnQkFBTjs7O0VBQ04sS0FBQSxHQUFRLENBQUMsT0FBQSxDQUFRLE9BQVIsQ0FBRCxDQUFBLENBQWtCLEdBQUcsQ0FBQyxJQUF0Qjs7RUFDUixPQUFBLEdBQVUsQ0FBQyxPQUFBLENBQVEsd0JBQVIsQ0FBRCxDQUFBLENBQW1DLE9BQUEsQ0FBUSxZQUFSLENBQW5DOztFQUNWLFFBQUEsR0FBVyxPQUFBLENBQVEsa0JBQVI7O0VBQ1gsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztFQUNWLGFBQWMsQ0FBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVIsQ0FBUDs7RUFDZixTQUFBLEdBQVksT0FBQSxDQUFRLFdBQVI7O0VBQ1osSUFBSSxDQUFDLEtBQUwsR0FBYSxPQUFBLENBQVEsWUFBUjs7RUFFYixLQUFBLEdBQVEsU0FBQyxPQUFELEVBQVMsQ0FBVDtBQUNOLFFBQUE7SUFBQSxJQUFHLE9BQU8sT0FBUCxLQUFrQixVQUFyQjtNQUNFLE1BQWMsQ0FBQyxFQUFELEVBQUksT0FBSixDQUFkLEVBQUMsZ0JBQUQsRUFBUyxXQURYOzs7TUFFQSxVQUFXOztJQUVYLE9BQUEsR0FBVTtJQVdWLEVBQUEsR0FBSyxPQUFPLENBQUMsRUFBUixHQUFhLFVBQUEsQ0FBQTtJQUNsQixJQUFPLE9BQU8sQ0FBQyxFQUFSLEtBQWMsS0FBckI7TUFDRSxFQUFBLEdBQUssT0FBTyxDQUFDLEVBQVIsR0FBYSxRQUFBLHNDQUFzQixFQUF0QixFQURwQjs7SUFFQSxPQUFPLENBQUMsT0FBUixHQUFrQjtJQUNsQixPQUFPLENBQUMsSUFBUixHQUFlO0lBQ2YsT0FBTyxDQUFDLE9BQVIsR0FBa0IsU0FBQyxDQUFEO0FBQ2hCLFVBQUE7OENBQVMsQ0FB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Q0EsT0FBTyxDQUFDLFFBQVIsR0FBbUI7ZUFJbkIsS0FBQSxDQUFNLFNBQUMsR0FBRDtBQUNKLGNBQUE7VUFETSxNQUFEO1VBQ0wsS0FBQSxDQUFNLGNBQU4sRUFBc0IsR0FBdEI7VUFLQSxPQUFPLENBQUMsR0FBUixHQUFjO2lCQUlkLFFBQUEsQ0FBUyxTQUFBO1lBQ1AsS0FBQSxDQUFNLGNBQU47bUJBQ0EsRUFBRSxDQUFDLE9BQUgsQ0FBVyxPQUFYO1VBRk8sQ0FBVDtRQVZJLENBQU47TUFQZ0MsQ0FBbEM7YUFxQkEsS0FBQSxDQUFNLDRCQUFOO0lBMUJlLENBQWpCO1dBNEJBO0VBdE9NOztFQXdPUixNQUFNLENBQUMsT0FBUCxHQUFpQjs7RUFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFmLEdBQXlCOztFQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLEVBQWYsR0FBb0I7O0VBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBZixHQUFzQjtBQXBQdEIiLCJzb3VyY2VzQ29udGVudCI6WyIgICAgcGtnID0gbmFtZTogJ3phcHBhanMtY2xpZW50J1xuICAgIGRlYnVnID0gKHJlcXVpcmUgJ2RlYnVnJykgcGtnLm5hbWVcbiAgICByZXF1ZXN0ID0gKHJlcXVpcmUgJ3N1cGVyYWdlbnQtYXMtcHJvbWlzZWQnKSByZXF1aXJlICdzdXBlcmFnZW50J1xuICAgIHNvY2tldGlvID0gcmVxdWlyZSAnc29ja2V0LmlvLWNsaWVudCdcbiAgICBkb21yZWFkeSA9IHJlcXVpcmUgJ2RvbXJlYWR5J1xuICAgIHtvYnNlcnZhYmxlfSA9IHJpb3QgPSByZXF1aXJlICdyaW90J1xuICAgIGludmFyaWF0ZSA9IHJlcXVpcmUgJ2ludmFyaWF0ZSdcbiAgICByaW90LnJvdXRlID0gcmVxdWlyZSAncmlvdC1yb3V0ZSdcblxuICAgIHphcHBhID0gKG9wdGlvbnMsZikgLT5cbiAgICAgIGlmIHR5cGVvZiBvcHRpb25zIGlzICdmdW5jdGlvbidcbiAgICAgICAgW29wdGlvbnMsZl0gPSBbe30sb3B0aW9uc11cbiAgICAgIG9wdGlvbnMgPz0ge31cblxuICAgICAgY29udGV4dCA9IHt9XG5cbkNvbnRleHRcbj09PT09PT1cblxuVGhlIFphcHBhSlMtQ2xpZW50IGNvbnRleHQgY29udGFpbnMgdGhlIGZvbGxvd2luZyBvYmplY3RzOlxuKiBgQGlvYCwgdGhlIFNvY2tldC5JTyBjbGllbnQuXG4qIGBAcmVxdWVzdGAsIGEgUHJvbWlzaWZpZWQgYHN1cGVyYWdlbnRgIFJFU1QgY2xpZW50LlxuKiBgQHJpb3RgLCB0aGUgcmlvdGpzIG1vZHVsZS5cbiogYEBldmAsIGEgW3Jpb3Qtb2JzZXJ2YWJsZV0oaHR0cHM6Ly9naXRodWIuY29tL3Jpb3Qvb2JzZXJ2YWJsZS90cmVlL21hc3Rlci9kb2MpIC0tIGJhc2ljYWxseSB5b3UgY2FuIHJ1biBgLm9uYCBhbmQgYC50cmlnZ2VyYCBvbiBpdC5cblxuICAgICAgZXYgPSBjb250ZXh0LmV2ID0gb2JzZXJ2YWJsZSgpXG4gICAgICB1bmxlc3Mgb3B0aW9ucy5pbyBpcyBmYWxzZVxuICAgICAgICBpbyA9IGNvbnRleHQuaW8gPSBzb2NrZXRpbyBvcHRpb25zLmlvID8ge31cbiAgICAgIGNvbnRleHQucmVxdWVzdCA9IHJlcXVlc3RcbiAgICAgIGNvbnRleHQucmlvdCA9IHJpb3RcbiAgICAgIGNvbnRleHQuaW5jbHVkZSA9IChtKSAtPlxuICAgICAgICBtLmluY2x1ZGU/LmNhbGwgY29udGV4dCwgY29udGV4dFxuXG5UaGVzZSBvYmplY3RzIGFyZSBhbHdheXMgYXZhaWxhYmxlIGluc2lkZSBoYW5kbGVycyBhcyB3ZWxsIVxuXG4gICAgICBidWlsZF9jdHggPSAobykgLT5cbiAgICAgICAgY3R4ID1cbiAgICAgICAgICBldjogY29udGV4dC5ldlxuICAgICAgICAgIGlvOiBjb250ZXh0LmlvXG4gICAgICAgICAgcmVxdWVzdDogY29udGV4dC5yZXF1ZXN0XG4gICAgICAgICAgcmlvdDogY29udGV4dC5yaW90XG4gICAgICAgICAgZW1pdDogY29udGV4dC5lbWl0XG4gICAgICAgICAgb246IGNvbnRleHQub25cbiAgICAgICAgY3R4W2tdID0gdiBmb3Igb3duIGssdiBvZiBvXG4gICAgICAgIGN0eFxuXG5UaGUgWmFwcGFKUy1DbGllbnQgY29udGV4dCBhbHNvIGNvbnRhaW5zOlxuKiBgQGluY2x1ZGUgbWAgZXhlY3V0ZXMgYG0uaW5jbHVkZWAgd2l0aGluIHRoZSBaYXBwYUpTIGNvbnRleHQgaXRzZWxmLlxuXG5SZWFkeVxuPT09PT1cblxuV2hlbiBhbGwgdGhlIFphcHBhSlMtQ2xpZW50IGhhbmRzaGFrZSBpcyBkb25lLCBhbmQgb25jZSB0aGUgRE9NIGlzIHJlYWR5LCB0aGUgY2FsbGJhY2sgb2YgYEByZWFkeWAgaXMgY2FsbGVkIHdpdGggaXRzIGNvbnRleHQgc2V0IHRvIHRoZSBaYXBwYUpTLUNsaWVudCBjb250ZXh0LlxuXG5gYGBcbkByZWFkeSAtPlxuICBAZW1pdCAncmVhZHknXG4gIEByZXF1ZXN0LmdldCAnL2RhdGEuanNvbidcbiAgLnRoZW4gKGRhdGEpIC0+IGFsZXJ0IGRhdGFcbiAgIyBldGMuXG5gYGBcblxuICAgICAgY29udGV4dC5yZWFkeSA9IChmKSAtPlxuICAgICAgICBjb250ZXh0LmV2Lm9uICdyZWFkeScsIC0+XG4gICAgICAgICAgY3R4ID0gYnVpbGRfY3R4XG4gICAgICAgICAgICBzZXR0aW5nczogY29udGV4dC5zZXR0aW5nc1xuICAgICAgICAgICAgZ2V0OiBjb250ZXh0LmdldFxuICAgICAgICAgICAgcm91dGU6IGNvbnRleHQucm91dGVcbiAgICAgICAgICAgIHN0YXJ0OiBjb250ZXh0LnN0YXJ0XG4gICAgICAgICAgZi5hcHBseSBjdHhcblxuUm91dGVyXG49PT09PT1cblxuVGhlIHJvdXRlciBpcyBbcmlvdCdzIHJvdXRlcl0oaHR0cHM6Ly9naXRodWIuY29tL3Jpb3Qvcm91dGUvdHJlZS9tYXN0ZXIvZG9jKS4gSG93ZXZlciBpdCBpcyBub3Qgc3RhcnRlZCB1bnRpbCB5b3UgZXhwbGljaXRlbHkgY2FsbCBgQHN0YXJ0KClgLCBzbyBmZWVsIGZyZWUgdG8gdXNlIHlvdXIgb3duIHJvdXRlciBpbnN0ZWFkIGlmIHlvdSdkIGxpa2UuXG5cbiogYEBzdGFydCgpYCBpcyByZXF1aXJlZCB0byBzdGFydCB0aGUgUmlvdCByb3V0ZXIuXG5cbiAgICAgIGNvbnRleHQuc3RhcnQgPSAtPlxuICAgICAgICByaW90LnJvdXRlLnN0YXJ0KClcbiAgICAgICAgcmlvdC5yb3V0ZS5leGVjKClcblxuKiBgQGdldGAgY2FuIGJlIHVzZWQgdGhlIHNhbWUgd2F5IGFzIFphcHBhSlMnIGBAZ2V0YDsgZXhjZXB0IGl0IHdvcmtzIG9uIHRoZSBoYXNoLXBhdGgsIG5vdCB0aGUgVVJJIHBhdGguXG4gIFlvdSBjYW4gdXNlIGBAcm91dGVgIGlmIHlvdSBwcmVmZXIgdG8gdXNlIHRoZSByaW90anMgbmFtZSBpbnN0ZWFkIG9mIGBAZ2V0YC5cblxuICAgICAgY29udGV4dC5nZXQgPSBjb250ZXh0LnJvdXRlID0gaW52YXJpYXRlIChrLHYpIC0+XG4gICAgICAgIHJpb3Qucm91dGUgaywgLT5cblxuUm91dGUgY29udGV4dFxuLS0tLS0tLS0tLS0tLVxuXG4qIGBwYXJhbXNgIGNvbnRhaW5zIHRoZSAocG9zaXRpb25hbCkgcGFyYW1ldGVycyBpbiBhbiBhcnJheS5cbiogYHF1ZXJ5YCBjb250YWlucyB0aGUgb3B0aW9uYWwgcXVlcnkgcGFyYW1ldGVycyBhcyBhbiBvYmplY3QuXG5cblVzZSAnLi4nIGF0IHRoZSBlbmQgb2YgYSBwYXRoIHRvIG1hdGNoIHF1ZXJ5IGFyZ3VtZW50cy5cblxuRm9yIGV4YW1wbGUgdG8gY2FwdHVyZSBgL2Zvbz9iYXI9M2BcbmBgYFxuQGdldCAnL2Zvby4uJzogLT4gQHF1ZXJ5LmJhclxuYGBgXG5cbiAgICAgICAgICBjdHggPSBidWlsZF9jdHhcbiAgICAgICAgICAgIHBhcmFtczogYXJndW1lbnRzXG4gICAgICAgICAgICBxdWVyeTogcmlvdC5yb3V0ZS5xdWVyeSgpXG4gICAgICAgICAgdi5hcHBseSBjdHgsIGFyZ3VtZW50c1xuXG5Tb2NrZXQuSU9cbj09PT09PT09PVxuXG5BIHNvY2tldC5pbyBjbGllbnQgaXMgaW5jbHVkZWQsIHlvdSBjYW4gaGFuZGxlIGluY29taW5nIG1lc3NhZ2VzIGZyb20gdGhlIHNlcnZlciB1c2luZyBgQG9uYCBhbmQgc2VuZCBtZXNzYWdlcyBiYWNrIHVzaW5nIGBAZW1pdGAuXG5cbiAgICAgIGNvbnRleHQub24gPSBpbnZhcmlhdGUgKGV2ZW50LGFjdGlvbikgLT5cbiAgICAgICAgaW8ub24gZXZlbnQsIChkYXRhLGFjaykgLT5cblxuTWVzc2FnZSBoYW5kbGVyIGNvbnRleHRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblRoZSBzYW1lIGNvbnRleHQgaXMgcHJvdmlkZWQgZm9yIGBAb25gIGhhbmRsZXIgYXMgaW4gc2VydmVyLXNpZGUgWmFwcGFKUzpcbiogYEBldmVudGAgY29udGFpbnMgdGhlIGV2ZW50J3MgbmFtZTtcbiogYEBkYXRhYCBjb250YWlucyB0aGUgb3B0aW9uYWwgZXZlbnQncyBkYXRhO1xuKiBgQGFja2AgaXMgcHJvdmlkZWQgaWYgdGhlIHNlbmRlciByZXF1ZXN0ZWQgYWNrbm93bGVkZ21lbnQuXG5cbkFkZGl0aW9uYWxseSwgYEBkYXRhYCBhbmQgYEBhY2tgIGFyZSBwcm92aWRlZCBhcyByZWd1bGFyIGFyZ3VtZW50cyBpZiB5b3UnZCByYXRoZXIgdXNlIHRoYXQuXG5cbiAgICAgICAgICBjdHggPSBidWlsZF9jdHhcbiAgICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgYWNrOiBhY2tcbiAgICAgICAgICBhY3Rpb24uYXBwbHkgY3R4LCBhcmd1bWVudHNcblxuICAgICAgY29udGV4dC5lbWl0ID0gaW52YXJpYXRlLmFja2VkIChldmVudCxkYXRhLGFjaykgLT5cbiAgICAgICAgaW8uZW1pdC5jYWxsIGlvLCBldmVudCwgZGF0YSwgKGFja19kYXRhKSAtPlxuXG5BY2sgY29udGV4dFxuLS0tLS0tLS0tLS1cblxuV2hlbiBlbWl0dGluZyBldmVudCwgeW91IG1pZ2h0IHByb3ZpZGUgYSBgYWNrYCBjYWxsYmFjay5cblxuKiBgQGV2ZW50YCBjb250YWlucyB0aGUgZXZlbnQncyBuYW1lO1xuKiBgQGRhdGFgIGNvbnRhaW5zIHRoZSBvcHRpb25hbCBhY2sgZGF0YS5cblxuICAgICAgICAgIGN0eCA9IGJ1aWxkX2N0eFxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgICAgICBkYXRhOiBhY2tfZGF0YVxuICAgICAgICAgIGFjay5hcHBseSBjdHgsIGFyZ3VtZW50c1xuXG5EaXNhYmxlIFNvY2tldC5pbyBvbiBvcHRpb25zXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIGlmIG9wdGlvbnMuaW8gaXMgZmFsc2VcbiAgICAgICAgY29udGV4dC5vbiA9IC0+XG4gICAgICAgICAgZGVidWcgJ1NvY2tldC5JTyBpcyBkaXNhYmxlZCdcbiAgICAgICAgY29udGV4dC5lbWl0ID0gLT5cbiAgICAgICAgICBkZWJ1ZyAnU29ja2V0LklPIGlzIGRpc2FibGVkJ1xuXG5BcHBseSBVc2VyIEZ1bmN0aW9uXG49PT09PT09PT09PT09PT09PT09XG5cbiAgICAgIGlmIGY/XG4gICAgICAgIGYuY2FsbCBjb250ZXh0LCBjb250ZXh0XG5cbkxvY2FsLW9ubHlcbi0tLS0tLS0tLS1cblxuSWYgdGhlIGBpb2Agb3B0aW9uIGlzIGZhbHNlLCBkbyBub3Qgd2FpdCBmb3IgSU8gY29ubmVjdC5cblxuICAgICAgaWYgb3B0aW9ucy5pbyBpcyBmYWxzZVxuICAgICAgICBkb21yZWFkeSAtPlxuICAgICAgICAgIGRlYnVnICdET00gaXMgcmVhZHknXG4gICAgICAgICAgZXYudHJpZ2dlciAncmVhZHknXG4gICAgICAgIHJldHVybiBjb250ZXh0XG5cbkF1dG9tYXRpY2FsbHkgYmluZGluZyBFeHByZXNzSlMgYW5kIFNvY2tldC5JT1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblRoZSBtYWluIHB1cnBvc2Ugb2YgWmFwcGFKUy1DbGllbnQgaXMgdG8gYXV0b21hdGljYWxseSBiaW5kIHRoZSBFeHByZXNzSnMgYW5kIHRoZSBTb2NrZXQuSU8gYEBzZXNzaW9uYCBvYmplY3RzIG9uIHRoZSBzZXJ2ZXIgc2lkZSwgc28gdGhhdCBhbGwgY29kZSBvbiB0aGUgc2VydmVyIGdhaW5zIGFjY2VzcyB0byB0aGUgc2FtZSBzZXNzaW9uIG9iamVjdC5cblRoaXMgd29ya3MgZXZlbiBpZiB0aGUgRXhwcmVzc0pTIGFuZCB0aGUgU29ja2V0LklPIGNvZGUgYXJlIHJ1bm5pbmcgb24gZGlmZmVyZW50IHNlcnZlcnMuXG5cblNoYXJlXG4tLS0tLVxuXG5UaGUgZ29hbCBvZiB0aGUgYHNoYXJlYCBmdW5jdGlvbiBpcyB0byBiaW5kIHRoZSBzb2NrZXQgSUQgd2l0aCB0aGUgRXhwcmVzc0pTIHNlc3Npb24sIHRoZW4gcHJvdmlkZSB0aGUgc2Vzc2lvbiBJRCBiYWNrIHRvIHRoZSBzb2NrZXQuSU8gc2VydmVyLlxuXG4gICAgICBzaGFyZSA9IChuZXh0KSAtPlxuICAgICAgICB6YXBwYV9wcmVmaXggPSBjb250ZXh0LnNldHRpbmdzLnphcHBhX3ByZWZpeCA/ICcvemFwcGEnXG4gICAgICAgIGNoYW5uZWxfbmFtZSA9IGNvbnRleHQuc2V0dGluZ3MuemFwcGFfY2hhbm5lbCA/ICdfX2xvY2FsJ1xuXG5MZXQgdGhlIEV4cHJlc3Mgc2VydmVyIHNhdmUgaXRzIHNlc3Npb24uaWQgYW5kIGJpbmQgaXQgdG8gdGhlIGtleS5cblxuICAgICAgICB1cmkgPSBcIiN7emFwcGFfcHJlZml4fS9zb2NrZXQvI3tjaGFubmVsX25hbWV9LyN7aW8uaWR9XCJcbiAgICAgICAgZGVidWcgXCJSZXF1ZXN0aW5nICN7dXJpfVwiXG4gICAgICAgIHJlcXVlc3RcbiAgICAgICAgLmdldCB1cmlcbiAgICAgICAgLmFjY2VwdCAnanNvbidcbiAgICAgICAgLmNhdGNoIChlcnJvcikgLT5cbiAgICAgICAgICBib2R5OiBrZXk6IG51bGxcbiAgICAgICAgLnRoZW4gKHtib2R5OntrZXl9fSkgLT5cblxuTGV0IHRoZSBzb2NrZXQuaW8gc2VydmVyIGtub3cgaG93IHRvIHJldHJpZXZlIHRoZSBzZXNzaW9uLmlkIGJ5IHByb3ZpZGluZyBpdCB0aGUga2V5LlxuXG4gICAgICAgICAgaWYga2V5P1xuICAgICAgICAgICAgZGVidWcgXCJTZW5kaW5nIF9femFwcGFfa2V5IHRvIHNlcnZlclwiLCB7a2V5fVxuICAgICAgICAgICAgaW8uZW1pdCAnX196YXBwYV9rZXknLCB7a2V5fSwgbmV4dFxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG5leHQga2V5OiBudWxsXG5cbk9uIElPIGNvbm5lY3Rcbi0tLS0tLS0tLS0tLS1cblxuV2hlbiB0aGUgSU8gc29ja2V0IGlzIGNvbm5lY3RlZCxcblxuICAgICAgaW8ub24gJ2Nvbm5lY3QnLCAtPlxuICAgICAgICBkZWJ1ZyBcIkNvbm5lY3RcIlxuXG5yZXRyaWV2ZSB0aGUgWmFwcGEgYXBwbGljYXRpb24gc2V0dGluZ3MsXG5cbiAgICAgICAgaW8uZW1pdCAnX196YXBwYV9zZXR0aW5ncycsIG51bGwsIChzZXR0aW5ncykgLT5cblxuICAgICAgICAgIGRlYnVnICdSZWNlaXZlZCBzZXR0aW5ncycsIHNldHRpbmdzXG4gICAgICAgICAgY29udGV4dC5zZXR0aW5ncyA9IHNldHRpbmdzXG5cbnRoZW4gYmluZCB0aGUgc29ja2V0IGluIHRoZSBFeHByZXNzSlMgc2Vzc2lvbiwgYW5kIHByb3ZpZGVzIHRoZSBFeHByZXNzSlMgc2Vzc2lvbiBJRCB0byB0aGUgU29ja2V0LklPIHNlcnZlci5cblxuICAgICAgICAgIHNoYXJlICh7a2V5fSkgLT5cbiAgICAgICAgICAgIGRlYnVnICdSZWNlaXZlZCBrZXknLCBrZXlcblxuV2UgZG8gbm90IHNhdmUgdGhlIGtleSBpbnNpZGUgdGhlIGNvbnRleHQgdW50aWwgYWxsIHRoZSBzdGVwcyBhcmUgY29tcGxldGVkLlxuTm90ZTogVGhlIGtleSBpcyBub3JtYWxseSBub3QgbmVlZGVkLlxuXG4gICAgICAgICAgICBjb250ZXh0LmtleSA9IGtleVxuXG5GaW5hbGx5LCBvbmNlIHRoZSBET00gaXMgcmVhZHksIHRyaWdnZXIgYSBgcmVhZHlgIGV2ZW50IHNvIHRoYXQgb3VyIGNsaWVudC1zaWRlIGFwcGxpY2F0aW9uIG1heSBzdGFydC5cblxuICAgICAgICAgICAgZG9tcmVhZHkgLT5cbiAgICAgICAgICAgICAgZGVidWcgJ0RPTSBpcyByZWFkeSdcbiAgICAgICAgICAgICAgZXYudHJpZ2dlciAncmVhZHknXG5cbiAgICAgICAgZGVidWcgXCJXYWl0aW5nIGZvciBaYXBwYSBzZXR0aW5nc1wiXG5cbiAgICAgIGNvbnRleHRcblxuICAgIG1vZHVsZS5leHBvcnRzID0gemFwcGFcbiAgICBtb2R1bGUuZXhwb3J0cy5yZXF1ZXN0ID0gcmVxdWVzdFxuICAgIG1vZHVsZS5leHBvcnRzLmlvID0gc29ja2V0aW9cbiAgICBtb2R1bGUuZXhwb3J0cy5yaW90ID0gcmlvdFxuIl19
//# sourceURL=/srv/home/stephane/Artisan/Managed/Node/zappajs-client/index.coffee.md